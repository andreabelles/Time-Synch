function [pIMU, vIMU, pGNSS, xEKF, PEKF, xSkog, PSkog, vEKF, pEKF, biasAccEKF, pSkog, vSkog, biasAccSkog, timeDelaySkog] = ...
                        simulateEstimations(p, tspan, Config)

%% Initializations

nPts    = length(tspan);

% IMU Sensor Measurements
measAcc = zeros(nPts,1);
measAccCorrEKF = zeros(nPts,1);
measAccCorrSkog = zeros(nPts,1);
measAccWithDelay = zeros(nPts,1);
measAccCorrSkog2 = zeros(nPts,1);
measAccCorrEKF2 = zeros(nPts,1);

% IMU-Only Navigation Solution
vIMU    = zeros(nPts,1);    
vIMU(1) = Config.v0;
pIMU    = zeros(nPts,1);    
pIMU(1) = Config.p0;
vIMUWithDelay    = zeros(nPts,1);    
pIMUWithDelay    = zeros(nPts,1);    
pIMUWithDelay(1) = Config.p0;

% GNSS-Only Navigation Solution
pGNSS   = nan(nPts,1);
pGNSSNoDelay = nan(nPts,1);
pGNSSCorr = nan(nPts,1);
% Standard EKF:
% GNSS/INS Integration Navigation Solution
pEKF    = zeros(nPts,1);
pEKF(1) = Config.rp0;
vEKF    = zeros(nPts,1);
vEKF(1) = Config.rv0;
biasAccEKF = zeros(nPts,1);
biasAccEKF(1) = Config.rba0;
% Error-State Vector
xEKF        = zeros(3,nPts);
% Covariance matrix
PEKF        = zeros(3,3,nPts);
PEKF(:,:,1) = [Config.sigmaInitPos^2 0 0; ...
               0 Config.sigmaInitVel^2 0; ...
               0 0 Config.sigmaInitAccBias^2];
%test
pEKF2    = zeros(nPts,1);
pEKF2(1) = Config.rp0;
vEKF2    = zeros(nPts,1);
vEKF2(1) = Config.rv0;
biasAccEKF2 = zeros(nPts,1);
biasAccEKF2(1) = Config.rba0;
% Error-State Vector
xEKF2        = zeros(3,nPts);
% Covariance matrix
PEKF2        = zeros(3,3,nPts);
PEKF2(:,:,1) = [Config.sigmaInitPos^2 0 0; ...
               0 Config.sigmaInitVel^2 0; ...
               0 0 Config.sigmaInitAccBias^2];
% Skog EKF: 
% GNSS/INS Integration Navigation Solution
pSkog    = zeros(nPts,1);
pSkog(1) = Config.rp0;
vSkog    = zeros(nPts,1);
vSkog(1) = Config.rv0;
biasAccSkog = zeros(nPts,1);
biasAccSkog(1) = Config.rba0;
timeDelaySkog = zeros(nPts,1);
timeDelaySkog(1) = Config.rt0;
% Error-State Vector
xSkog        = zeros(4,nPts);
% Covariance matrix
PSkog        = zeros(4,4,nPts);
PSkog(:,:,1) = [Config.sigmaInitPos^2 0 0 0; ...
                0 Config.sigmaInitVel^2 0 0; ...
                0 0 Config.sigmaInitAccBias^2 0; ...
                0 0 0 Config.sigmaInitDelay^2];
% Skog EKF 2: 
% GNSS/INS Integration Navigation Solution
vtestIMU    = zeros(nPts,1);
vtestIMU(1) = Config.rv0;
ptestIMU    = zeros(nPts,1);
ptestIMU(1) = Config.rp0;
biastest = zeros(nPts,1);
biastest(1) = Config.rba0;
timeDelaytest = zeros(nPts,1);
timeDelaytest(1) = Config.rt0;

% Error-State Vector
xSkog2        = zeros(4,nPts);
% Covariance matrix
PSkog2        = zeros(4,4,nPts);
PSkog2(:,:,1) = [Config.sigmaInitPos^2 0 0 0; ...
                0 Config.sigmaInitVel^2 0 0; ...
                0 0 Config.sigmaInitAccBias^2 0; ...
                0 0 0 Config.sigmaInitDelay^2];

for k = 2:1:nPts
    % IMU measurements generation
    measAcc(k) = Config.a0 + Config.biasMeasAcc + normrnd(0,sqrt(Config.varMeasAcc));
    % GNSS measurements generation
    if mod(k,Config.M) == 0 && (k - Config.tDelay/Config.tIMU)>0
        noiseGNSS = normrnd(0,sqrt(Config.varMeasPosGNSS));
        pGNSS(k) = p(k - Config.tDelay/Config.tIMU) + noiseGNSS;%normrnd(0,sqrt(Config.varMeasPosGNSS));
        pGNSSNoDelay(k) = p(k) + noiseGNSS;
    end
    % Strapdown equations
    vIMU(k) = vIMU(k-1) + measAcc(k)*Config.tIMU;
    pIMU(k) = pIMU(k-1) + vIMU(k)*Config.tIMU;
    if(k >= 3100)
        measAccWithDelay(k) = measAcc(k - Config.tDelay/Config.tIMU);
        vIMUWithDelay(k) = vIMUWithDelay(k-1) + measAcc(k - Config.tDelay/Config.tIMU)*Config.tIMU;
        pIMUWithDelay(k) = pIMUWithDelay(k-1) + vIMUWithDelay(k)*Config.tIMU;
    else
        measAccWithDelay(k) = measAcc(k);
        vIMUWithDelay(k) = vIMU(k);
        pIMUWithDelay(k) = pIMU(k);
    end
    %EKF
%     [xEKF(:,k), PEKF, vEKF, pEKF, biasAccEKF, measAccCorrEKF] = ...
%                                     standardEKF(xEKF(:,k-1),    ...
%                                                 PEKF,           ...
%                                                 pGNSSNoDelay(k),       ...
%                                                 k,              ...
%                                                 measAcc,        ...
%                                                 measAccCorrEKF,    ...
%                                                 pEKF, ...    
%                                                 vEKF, ...
%                                                 biasAccEKF,...
%                                                 Config);
%     [xEKF2(:,k), PEKF2, vEKF2, pEKF2, biasAccEKF2, measAccCorrEKF2] = ...
%                                     standardEKF(xEKF2(:,k-1),    ...
%                                                 PEKF2,           ...
%                                                 pGNSS(k),       ...
%                                                 k,              ...
%                                                 measAccWithDelay,        ...
%                                                 measAccCorrEKF2,    ...
%                                                 pEKF2, ...    
%                                                 vEKF2, ...
%                                                 biasAccEKF2,...
%                                                 Config);    
    [xSkog(:,k), PSkog, vSkog, pSkog, biasAccSkog, timeDelaySkog, measAccCorrSkog, vtestIMU, ptestIMU, biastest, timeDelaytest] = ...
                                            skogEKF(xSkog(:,k-1),           ...
                                                    PSkog,              ...
                                                    pGNSS(k),           ....
                                                    k,                  ...
                                                    measAcc,            ...
                                                    measAccCorrSkog,        ...
                                                    pSkog,           ...
                                                    vSkog,           ...
                                                    biasAccSkog,     ...
                                                    timeDelaySkog,   ...
                                                    tspan,           ...
                                                    Config,...
                                                    vtestIMU, ...
                                                    ptestIMU, ...
                                                    biastest, ...
                                                    timeDelaytest);
                                                
%     [xSkog2(:,k), PSkog2, vSkog2, pSkog2, biasAccSkog2, timeDelaySkog2, measAccCorrSkog2] = ...
%                                             skogEKF(xSkog2(:,k-1),           ...
%                                                     PSkog2,              ...
%                                                     pGNSSNoDelay(k),           ...
%                                                     k,                  ...
%                                                     measAcc,            ...
%                                                     measAccCorrSkog2,        ...
%                                                     pSkog2,           ...
%                                                     vSkog2,           ...
%                                                     biasAccSkog2,     ...
%                                                     timeDelaySkog2,   ...
%                                                     tspan,           ...
%                                                     Config);
    % TODO: Lee and Johnson method
    
     
end

figure; 
plot(pIMUWithDelay(1:k), 'k-'); hold on; 
plot(pIMU(1:k),'r-'); plot(pGNSS(1:k), 'k.'); 
plot(pGNSSNoDelay(1:k),'r.'); 
% plot(pEKF,'b-');
% plot(pEKF2,'b-.'); 
% plot(pSkog(1:k),'g-');
plot(ptestIMU(1:k),'b-');
% plot(pSkog2,'g-.');

figure; 
plot(xSkog(4,Config.M:Config.M:end),'r-'); hold on; 
plot(timeDelaySkog(Config.M:Config.M:end),'b-');
% plot(xSkog2(4,Config.M:Config.M:end),'r-.'); hold on; 
% plot(timeDelaySkog2(Config.M:Config.M:end),'b-.');
legend('ErrState Delay', 'Delay');%, 'ErrState No Delay', 'Pos No Delay')

end